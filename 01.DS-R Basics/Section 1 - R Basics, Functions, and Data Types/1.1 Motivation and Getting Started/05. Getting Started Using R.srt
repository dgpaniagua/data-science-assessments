0
00:00:00,000 --> 00:00:02,928


1
00:00:02,928 --> 00:00:08,784
[MUSIC PLAYING]

2
00:00:08,784 --> 00:00:12,760
RAFAEL IRIZARRY: R is not a programming language like C or Java.

3
00:00:12,760 --> 00:00:16,690
It was not created by software engineers for software development.

4
00:00:16,690 --> 00:00:21,250
Instead, it was developed by statisticians and data analysts

5
00:00:21,250 --> 00:00:25,720
as an interactive environment for data analysis.

6
00:00:25,720 --> 00:00:29,920
The interactivity is an indispensable feature in data science,

7
00:00:29,920 --> 00:00:35,530
because as you will soon learn, the ability to quickly explore data

8
00:00:35,530 --> 00:00:39,000
is a necessity for success in this field.

9
00:00:39,000 --> 00:00:41,920
However, like in any other programming language,

10
00:00:41,920 --> 00:00:46,750
you can save your work as scripts, which you can easily execute at any moment.

11
00:00:46,750 --> 00:00:50,470
These scripts serve as a record of the analysis you performed,

12
00:00:50,470 --> 00:00:54,430
a key feature that facilitates reproducible work.

13
00:00:54,430 --> 00:00:58,470
Other attractive features of R are the following.

14
00:00:58,470 --> 00:01:04,090
R is free and open source, meaning that you can look at the code.

15
00:01:04,090 --> 00:01:06,220
It runs across all major platforms--

16
00:01:06,220 --> 00:01:09,370
Windows, Mac OS, Unix, Linux.

17
00:01:09,370 --> 00:01:13,300
And data objects and scripts can be shared seamlessly

18
00:01:13,300 --> 00:01:15,370
across these platforms.

19
00:01:15,370 --> 00:01:19,960
There's also a large and growing active community of R users.

20
00:01:19,960 --> 00:01:22,600
And as a result, there are numerous resources

21
00:01:22,600 --> 00:01:25,430
for learning and asking questions.

22
00:01:25,430 --> 00:01:27,940
It's easy for others to contribute add-ons,

23
00:01:27,940 --> 00:01:32,890
which enable developers to share software implementations of new data

24
00:01:32,890 --> 00:01:34,510
science techniques.

25
00:01:34,510 --> 00:01:39,060
Interactive data analysis usually occurs on the R console.

26
00:01:39,060 --> 00:01:43,250
In the R console, you can execute commands as you type them.

27
00:01:43,250 --> 00:01:46,690
There are several ways to gain access to an R console.

28
00:01:46,690 --> 00:01:50,620
The most common way is to download and install R, and then

29
00:01:50,620 --> 00:01:52,780
start it up on your computer.

30
00:01:52,780 --> 00:01:56,410
We provide installation instructions in the course dashboard.

31
00:01:56,410 --> 00:01:58,870
The console looks something like this.

32
00:01:58,870 --> 00:02:00,850
You can see that you have some information

33
00:02:00,850 --> 00:02:03,400
about R, which version it is et cetera.

34
00:02:03,400 --> 00:02:07,750
And then towards the bottom, you see a greater than sign and a cursor.

35
00:02:07,750 --> 00:02:10,810
That is where you type your commands.

36
00:02:10,810 --> 00:02:14,260
When you type an expression into the console and hit Return,

37
00:02:14,260 --> 00:02:16,330
the expression is evaluated.

38
00:02:16,330 --> 00:02:20,020
As a very quick and simple example, try using the console

39
00:02:20,020 --> 00:02:24,656
to calculate a 15% tip on a meal that costs $19.71.

40
00:02:24,656 --> 00:02:25,530
Here's how you do it.

41
00:02:25,530 --> 00:02:29,000
You just write the numbers out, hit Return, and you get your answer.

42
00:02:29,000 --> 00:02:32,860
You should leave a tip of $2.96.

43
00:02:32,860 --> 00:02:36,490
One of the great advantages of R over point and click analysis software

44
00:02:36,490 --> 00:02:39,310
is that you can save your work as scripts.

45
00:02:39,310 --> 00:02:42,610
You can edit and save these scripts using a text editor.

46
00:02:42,610 --> 00:02:46,660
We highly recommend working on an interactive, integrated development

47
00:02:46,660 --> 00:02:49,480
environment - an IDE.

48
00:02:49,480 --> 00:02:52,630
This includes editor, R-specific features, and then

49
00:02:52,630 --> 00:02:55,180
it has a console where you execute your code.

50
00:02:55,180 --> 00:02:58,900
We provide recommendations in the course dashboard.

51
00:02:58,900 --> 00:03:00,790
Here's an example of an IDE.

52
00:03:00,790 --> 00:03:03,520
You can see a pane where you write your scripts,

53
00:03:03,520 --> 00:03:07,850
another one where you have the console, and other panes with other information,

54
00:03:07,850 --> 00:03:12,340
as well as a place for your figures and plots to show up.

55
00:03:12,340 --> 00:03:18,250
R has many, many, many functions, many, many tools for you to use.

56
00:03:18,250 --> 00:03:21,880
However, the functionality provided by a fresh install of R

57
00:03:21,880 --> 00:03:24,730
is only a small fraction of that.

58
00:03:24,730 --> 00:03:29,830
We refer to what you get after you first install R as base R.

59
00:03:29,830 --> 00:03:34,750
The extra functionality comes from add-ons available from developers.

60
00:03:34,750 --> 00:03:38,110
There are currently hundreds of these available from CRAN,

61
00:03:38,110 --> 00:03:42,770
and many others shared via other repositories such as GitHub.

62
00:03:42,770 --> 00:03:46,680
However, because not everybody needs all available functionality,

63
00:03:46,680 --> 00:03:50,690
we instead make different components available via packages.

64
00:03:50,690 --> 00:03:55,220
R makes it very easy to install packages from within R itself.

65
00:03:55,220 --> 00:03:58,120
For example, to install the dslabs package,

66
00:03:58,120 --> 00:04:00,980
which we have created specifically for this course,

67
00:04:00,980 --> 00:04:04,990
and we use it to share datasets and share code related to the course,

68
00:04:04,990 --> 00:04:08,320
you would type install dot packages parenthesis, and in quotes dslabs.

69
00:04:08,320 --> 00:04:11,380


70
00:04:11,380 --> 00:04:12,790
Then you close the parentheses.

71
00:04:12,790 --> 00:04:17,290
Once you hit Return, R will automatically install this package.

72
00:04:17,290 --> 00:04:19,450
Assuming you're connected to the internet.

73
00:04:19,450 --> 00:04:23,800
You need to be connected to the internet to download the package and install it.

74
00:04:23,800 --> 00:04:27,300
IDEs usually provide a graphical user interface

75
00:04:27,300 --> 00:04:30,670
that facilitates package installation.

76
00:04:30,670 --> 00:04:33,190
Once the package is installed, we can then

77
00:04:33,190 --> 00:04:37,180
load the package into our R session using the library function, like this.

78
00:04:37,180 --> 00:04:41,920
We type library and in parentheses, dslabs.

79
00:04:41,920 --> 00:04:45,850
As you go through this course, you will notice that we load packages

80
00:04:45,850 --> 00:04:47,430
without installing them.

81
00:04:47,430 --> 00:04:51,760
This is because once you install a package, it remains in place,

82
00:04:51,760 --> 00:04:54,110
and only needs to be loaded with library.

83
00:04:54,110 --> 00:04:58,480
So if you see us loading a package, it's because we have already installed it.

84
00:04:58,480 --> 00:05:01,600
Now, if you try to load a package and you get an error,

85
00:05:01,600 --> 00:05:04,040
it probably means you need to install it first.

86
00:05:04,040 --> 00:05:08,400
The error will say something like, error in library dslabs,

87
00:05:08,400 --> 00:05:11,350
There's no package called dslabs.

88
00:05:11,350 --> 00:05:17,846


